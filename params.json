{
  "name": "Piotr Krysik's webpage",
  "tagline": "",
  "body": "Multi-rtl \r\n=========\r\nMaking multiple channels receiver from cheap RTL-SDR dongles\r\n------------------------------------------------------------\r\n\r\n\r\nAs a developer of gr-gsm - a GNU Radio based software for receiving GSM signal - I always thought that it would be great to have a multiple channels receiver that would be available for anyone. The reason is that it would be possible to do more with my software for all users who are interested in doing it and not only those who can afford a multichannel device like a USRP. For example with two channel receiver it would be possible to receive uplink of a GSM channel in addition to downlink. For example to do this with USRPs N200 two devices synchronized with a special cable are required. Total price of such solution is about 4000 dolars - too big amount for someone who starts journey with software radio and might be interested in my project.\r\n\r\n[I was reluctant](https://groups.google.com/d/msg/gr-gsm/4YiTK4WqFvs/BycVCdvNBwAJ) to implement a cheap multi-channel receiver myself. I thought that it is a matter of (short) time before someone will demonstrate a working solution transforming cheap RTL-SDR dongles (digital television receivers re-purposed to act as a software radio receivers) to a multi channel receiver. I had good reasons to think that it will eventually happen. There was already some important work done on this subject starting with Juha Vierinen's idea to synchronize clocks of multiple RTL-SDR receivers, so they were sampling with exactly the same rate.\r\n\r\nWhat was missing was time-synchronization between RTL-SDR dongles. When you start multiple RTL-SDR dongles at the roughly the same moment there always will be random delays (changing from one program start to another) between the sample streams coming from different receiver. Juha presented synchronization of the receivers working on the same frequency with use of cross-correlation of the signals coming from many receivers. It was done off-line - on files with the captured signal stored to disk - and no way to synchronize channels that work on different frequencies was demonstrated. This way it wasn't possible to capture for example GSM uplink and downlink synchronously as they are on different frequencies with large (at 45MHz for GSM900) separation.\r\n\r\nTime passed but somehow no ready-made solution materialized. At some point I decided that some effort from my side might be required in order to speed up this process a bit.\r\n\r\nBefore I decided to code time-synchronization myself [I have already shown](https://groups.google.com/d/msg/gr-gsm/4YiTK4WqFvs/VsFBpDoXCQAJ) that RTL-SDR receivers keep time-synchronization across retunings to different carrier frequencies. I will show it again here with a bit more of the background information. I coded the test so it first started with recording a signal on a GSM C0 (BCCH) frequency, then it switched to another central frequency where only noise was present and in the end it switched back to the same GSM C0 frequency. The GSM signal's amplitude is periodic with the period of 156.25us - equal to the duration of one [GSM TDMA timeslot](https://en.wikipedia.org/wiki/Um_interface#Radio_modem). Each GSM burst transmitted inside of timeslot has constant amplitude. After it there is always 8.25us long guard period when signal amplitude decreases to 0. If you sample the signal with `4*gsm_symbold_rate=4*1625000/6=1.08333... MHz` the length of a timeslot in samples is 625. The easy way giving indication that the signal didn't loose synchronization is to look if guard periods are in the expected position. In order to do this graphically I've cut the signal into blocks of the lenght of a single timeslot, created a matrix with consecutive bursts in the rows and plotted the matrix as an image with pixels intensity representing amplitude. The result can be observed on the image below:\r\n![RTL-SDR retune synchronization test](images/rtl_retune_sync_check_2.jpg)\r\n\r\nYou can first see the amplitude of the GSM signal, then amplitude of noise and in the end amplitude of the GSM signal again. What can be seen is that guard periods after two retunes of a RTL-SDR receiver are aligned. The same situation repeated for all recordings I made. Synchronization is kept. Hurray!\r\n\r\nThis experiment had shown that it is possible to time-synchronize multiple RTL-SDR dongles working on different frequencies with very simple means:\r\n* tuning the RTL-SDR dongles to the same frequency where some transmission is present,\r\n* recording a short signals with all of the dongles,\r\n* computing cross-correlation of the signals (i.e. with respect to a one selected channel),\r\n* finding position of maximums of cross-correlations in order to estimate relative delays of the channels,\r\n* correcting the delays so the channels are time-synchronized,\r\n* switching the dongles to their target frequencies,\r\n* changing other parameters of the channels (like gains) to target values.\r\n\r\nWhat was left was to get hands dirty and implement a program that does all these steps. I decided that the simplest way to implement the software was to create a GNU Radio hierarchical block that uses multiple RTL-SDR source blocks (created by [osmocom project](http://sdr.osmocom.org/trac/wiki/GrOsmoSDR)) - one for each dongle comprising a channel. First I wanted to do everything with use of Python only. I used off the shelf vetor sink block to get signals samples to Python. Then the delays were and then reconfigured the flowgrap in order to disconnect the vector sinks - so they don't save samples indefinitely. This solution proved to be wrong as after each reconfiguration of the flowgraph relative delays of channels changed randomly. In order to avoid modifying the path that I've chosen initially too much I decided to change vector sink block's C++ code so it fit the needs. I've extendded number of input channels (from one to any number), added possibility to limit the number of sample collected, and added call to a callback function when this number is reached. The callback function takes samples stored for each channel and does the steps described in the previous paragraph, needed in order to synchronize the received streams.\r\n\r\nCapturing GSM downlink and uplink with Multi-rtl\r\n------------------------------------------------\r\n\r\nThe usage of the block is presented in the [project's readme](https://github.com/ptrkrysik/multi_rtl/tree/master#usage). Here I will present the example of the use of Multi-rtl source block for synchronous reception of downlink and uplink of a GSM C0 channel. As a prerequisite two RTL-SDR dongles are needed. \r\n\r\nThe next step is not obligatory, but it will enable identification of the receiver's channels:\r\n* connect the first receiver and change its serial number with the following command:\r\nrtl_eeprom -d 0 -s 00000001\r\n* mark the dongle to know that it is the first one,\r\n* disconnect the dongle,\r\n* connect the secon one and change its serial number with the following command:\r\nrtl_eeprom -d 0 -s 00000002\r\n* mark the dongle so you know that it's the second one.\r\n\r\nThe basic prerequisite is to synchronize clocks of the dongles. In order to do that remove the oscillator form the second dongle and connect the two dongles according to the photos below:\r\n![dongles with common clock](https://github.com/ptrkrysik/multi_rtl/blob/rollout/docs/images/dongles_with_common_clock.jpg)\r\n\r\nI've created a sample gnuradio-companion aplication (mutlirtl_rx_to_cfile_2chan.grc) that enables two channel reception and storing the signals to files. It's flowgraph is presented below. It is very simple - there is `Multi-rtl` source configured to work with two channels then there are head blocks limiting number of recorded samples and in the end for each of the channels signals are stored to files with use of file sink blocks.\r\n\r\n![Sample two channel application using Multi-rtl](images/multi_rx_to_cfile_2chan.png)\r\n\r\nIn the example there was downlink of the C0 carrier frequency at 939MHz (`freq-ch0`). Uplink of that radio channel was at 894MHz (`freq-ch1`) as uplink-downlink separation for GSM900 is 45MHz. For synchronization downlink of the `C0` channel can be used (`sync-freq` opiton is therefore 939MHz), because it provides good enough accuracy for this application. As sampling frequency (`samp-rate`) `4*GSM_symbol_rate=4*1625000/6=1083333.3333(...)` was be used. Gains were set to `30 dB` for downlink and `10dB` for the uplink (`gain-ch0`, `gain-ch1`). Synchronization gains were set to the same value `30dB` (`sync-gain-ch0`, `sync-gain-ch1`). Samples of the signals were stored to `downlink.cfile` (`fname-ch0`) and `uplink.cfile` (`fname-ch1`). Finally the program was invoked with following options:\r\n```sh\r\nmutlirtl_rx_to_cfile_2chan.py --ch0-id-string=\"00000001\" --ch1-id-string=\"00000002\" --samp-rate 1083333.3333333333 --freq-ch0 939M --freq-ch1 894M --sync-freq 939e6 --gain-ch0 30 --gain-ch1 10 --sync-gain-ch0 30 --sync-gain-ch1 30 --fname-ch0 downlink.cfile --fname-ch1 uplink-cfile\r\n```\r\n\r\nDuring the recording I've sent an SMS with my phone that was working on the recorded frequency. The resulting files can be downloaded with use of the links below:\r\n* [downlink capture file](data/sms_multirtl_downlink_tail),\r\n* [uplink capture file](data/sms_multirtl_uplink_tail).\r\n\r\nAs I could recover the key used for my own call/SMS I was able to decode the encrypted part of the traffic with the SMS content. To decode the signal [installation of gr-gsm](https://github.com/ptrkrysik/gr-gsm/wiki/Installation) is required. After that call the following copy the [uplink_decoding_multi_rtl.py](https://raw.githubusercontent.com/ptrkrysik/examples/master/uplink_decoding_demo/uplink_decoding_multi_rtl.py) script from `gr-gsm`'s examples to the directory where the capture files are located, and run commandline:\r\n```sh\r\nwireshark -k -f udp -Y gsmtap -i lo &\r\n./uplink_decoding_multi_rtl.py\r\n```\r\n\r\nIn the `Wireshark` ",
  "note": "Don't delete this file! It's used internally to help with page regeneration."
}